{"version":3,"sources":["components/NumberProvider.js","components/NumberButton.js","components/FunctionButton.js","components/ClearButton.js","components/styles/Styles.js","components/Display.js","components/EqualButton.js","components/BackButton.js","components/NegativeButton.js","components/CosButton.js","components/SinButton.js","components/PiButton.js","components/ExponentButton.js","components/TanButton.js","components/CotButton.js","components/RootButton.js","components/LogButton.js","components/SquareButton.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["NumberContext","React","createContext","NumberProvider","props","useState","number","setNumber","storedNumber","setStoredNumber","functionType","setFunctionType","handleSetStoredValue","Provider","value","doMath","Math","round","parseFloat","sqrt","handleBackButton","deletedNumber","slice","length","handleClearValue","handleSetCalcFunction","type","handleSetCosValue","cos","handleSetSinValue","sin","handleSetExpoValue","exp","handleSetTanValue","tan","handleSetCotValue","handleSetRootValue","handleSetLogValue","log","handleSetSquareValue","pow","handleSetDisplayValue","num","includes","replace","handleToggleNegative","positiveNumber","children","CalculatorButton","buttonValue","useContext","onClick","FunctionButton","className","ClearButton","CalculatorStyles","styled","div","DisplayStyles","Display","undefined","EqualButton","BackButton","NegativeButton","CosButton","SinButton","PiButton","ExpoButton","TanButton","CotButton","RootButton","LogButton","SquareButton","Calculator","NumberButton","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cbd66cc2.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nexport const NumberContext = React.createContext();\n\nconst NumberProvider = props => {\n  const [number, setNumber] = useState('');\n  const [storedNumber, setStoredNumber] = useState('');\n  const [functionType, setFunctionType] = useState('');\n\n  const handleSetDisplayValue = num => {\n    if ((!number.includes('.') || num !== '.') && number.length < 8) {\n      setNumber(`${(number + num).replace(/^0+/, '')}`)\n    }\n  };\n\n  const handleSetCosValue=()=>{\n    setNumber(`${Math.round(`${ ( Math.cos(parseFloat(number))) * 1000}`) / 1000}`)\n    setStoredNumber(`${Math.round(`${ ( Math.cos(parseFloat(number))) * 1000}`) / 1000}`)\n    setNumber('')\n  }\n\n  const handleSetSinValue=()=>{\n    setNumber(`${Math.round(`${ ( Math.sin(parseFloat(number))) * 1000}`) / 1000}`)\n    setStoredNumber(`${Math.round(`${ ( Math.sin(parseFloat(number))) * 1000}`) / 1000}`)\n    setNumber('')\n  }\n\n  const handleSetExpoValue=()=>{\n    setNumber(`${Math.round(`${ ( Math.exp(parseFloat(number))) * 1000}`) / 1000}`)\n    setStoredNumber(`${Math.round(`${ ( Math.exp(parseFloat(number))) * 1000}`) / 1000}`)\n    setNumber('')\n  }\n\n  const handleSetTanValue=()=>{\n    setNumber(`${Math.round(`${ ( Math.tan(parseFloat(number))) * 1000}`) / 1000}`)\n    setStoredNumber(`${Math.round(`${ ( Math.tan(parseFloat(number))) * 1000}`) / 1000}`)\n    setNumber('')\n  }\n\n  const handleSetCotValue=()=>{\n    setNumber(`${Math.round(`${ (1/ (Math.tan(parseFloat(number))))* 1000}`) / 1000}`)\n    setStoredNumber(`${Math.round(`${ (1/( Math.tan(parseFloat(number)))) * 1000}`) / 1000}`)\n    setNumber('')\n  }\n\n  const handleSetRootValue=()=>{\n    setNumber(`${Math.round(`${ ( Math.sqrt(parseFloat(number))) * 1000}`) / 1000}`)\n    setStoredNumber(`${Math.round(`${ ( Math.sqrt(parseFloat(number))) * 1000}`) / 1000}`)\n    setNumber('')\n  }\n\n  const handleSetLogValue=()=>{\n    setNumber(`${Math.round(`${ ( Math.log(parseFloat(number))) * 1000}`) / 1000}`)\n    setStoredNumber(`${Math.round(`${ ( Math.log(parseFloat(number))) * 1000}`) / 1000}`)\n    setNumber('')\n  }\n\n  const handleSetSquareValue=()=>{\n    setNumber(`${Math.round(`${ ( Math.pow(parseFloat(number),2)) * 1000}`) / 1000}`)\n    setStoredNumber(`${Math.round(`${ ( Math.pow(parseFloat(number),2)) * 1000}`) / 1000}`)\n    setNumber('')\n  }\n\n\n\n\n\n  const handleSetStoredValue = () => {\n    setStoredNumber(number);\n    setNumber('');\n  };\n\n  const handleClearValue = () => {\n    setNumber('');\n    setStoredNumber('');\n    setFunctionType('');\n  };\n\n  const handleBackButton = () => {\n    if (number !== '') {\n      const deletedNumber = number.slice(0, number.length - 1);\n      setNumber(deletedNumber);\n    }\n  };\n\n  const handleSetCalcFunction = type => {\n    if (number) {\n      setFunctionType(type);\n      handleSetStoredValue();\n    }\n    if (storedNumber) {\n      setFunctionType(type);\n    }\n  };\n\n  const handleToggleNegative = () => {\n    if (number) {\n      if (number > 0) {\n        setNumber(`-${number}`);\n      } else {\n        const positiveNumber = number.slice(1);\n        setNumber(positiveNumber);\n      }\n    } else if (storedNumber > 0) {\n      setStoredNumber(`-${storedNumber}`);\n    } else {\n      const positiveNumber = storedNumber.slice(1);\n      setStoredNumber(positiveNumber);\n    }\n  };\n\n  const doMath = () => {\n    if (number && storedNumber) {\n      switch (functionType) {\n        case '+':\n          setStoredNumber(`${Math.round(`${(parseFloat(storedNumber) + parseFloat(number)) * 100}`) / 100}`);\n          break;\n        case '-':\n          setStoredNumber(`${Math.round(`${(parseFloat(storedNumber) - parseFloat(number)) * 1000}`) / 1000}`);\n          break;\n        case '/':\n          setStoredNumber(`${Math.round(`${(parseFloat(storedNumber) / parseFloat(number)) * 1000}`) / 1000}`);\n          break;\n        case '*':\n          setStoredNumber(`${Math.round(`${parseFloat(storedNumber) * parseFloat(number) * 1000}`) / 1000}`);\n          break;\n          case '%':\n            setStoredNumber(`${Math.round(`${parseFloat(storedNumber) % parseFloat(number) * 1000}`) / 1000}`);\n            break;\n        case '√':\n          setStoredNumber(`${Math.round(`${ (Math.sqrt(parseFloat(number))) * 1000}`) / 1000}`);\n          break;  \n        \n        default:\n          break;\n      }\n      setNumber('');\n    }\n  };\n\n  return (\n    <NumberContext.Provider\n      value={{\n        doMath,\n        functionType,\n        handleBackButton,\n        handleClearValue,\n        handleSetCalcFunction,\n        handleSetCosValue,\n        handleSetSinValue,\n        handleSetExpoValue,\n        handleSetTanValue,\n        handleSetCotValue,\n        handleSetRootValue,\n        handleSetLogValue,\n        handleSetSquareValue,\n        handleSetDisplayValue,\n        handleSetStoredValue,\n        handleToggleNegative,\n        number,\n        storedNumber,\n        setNumber,\n      }}\n    >\n      {props.children}\n    </NumberContext.Provider>\n  );\n};\n\nexport default NumberProvider;\n","import React, { useContext } from 'react';\nimport { NumberContext } from './NumberProvider';\n\nconst CalculatorButton = ({ buttonValue }) => {\n  const { handleSetDisplayValue } = useContext(NumberContext);\n  return (\n    <button type=\"button\" onClick={() => handleSetDisplayValue(buttonValue)}>\n      {buttonValue}\n    </button>\n  );\n};\n\nexport default CalculatorButton;\n","import React, { useContext } from 'react';\nimport { NumberContext } from './NumberProvider';\n\nconst FunctionButton = ({ buttonValue }) => {\n  const { handleSetCalcFunction } = useContext(NumberContext);\n  return (\n    <button className=\"function-button\" type=\"button\" onClick={() => handleSetCalcFunction(buttonValue)}>\n      {buttonValue}\n    </button>\n  );\n};\n\nexport default FunctionButton;\n","import React, { useContext } from 'react';\nimport { NumberContext } from './NumberProvider';\n\nconst ClearButton = () => {\n  const { handleClearValue } = useContext(NumberContext);\n  return (\n    <button type=\"button\" className=\"white-button\" onClick={() => handleClearValue()}>\n      C\n    </button>\n  );\n};\n\nexport default ClearButton;\n","import styled from 'styled-components';\n\nexport const CalculatorStyles = styled.div`\n  background-color: #4abdac;\n  width: 100%;\n  min-height: 100vh;\n  display: grid;\n  justify-items: center;\n  grid-template-rows: minmax(200px 350px) 1fr;\n  grid-template-columns: 1fr;\n  @media (max-width: 500px) {\n    max-width: 90%;\n    padding: 5%;\n  }\n  .display {\n    font-family: 'Orbitron', serif;\n    /* grid-area: display; */\n    margin: 0 !important;\n    width: 100%;\n    @media (max-width: 500px) {\n      width: 100%;\n      max-height: 200px;\n    }\n    h1 {\n      font-size: 4rem;\n      color: white;\n      text-align: center;\n      @media (max-width: 500px) {\n        font-size: 2rem;\n      }\n    }\n  }\n  .number-pad {\n    /* grid-area: numbers; */\n    display: grid;\n    grid-gap: 10px;\n    grid-template-columns: repeat(6, 1fr);\n    padding: 0px 0px 30px;\n    width: 700px;\n    margin: 0 auto;\n    @media (max-width: 500px) {\n      width: 100%;\n      margin: 0;\n    }\n    button {\n      width: 100%;\n      height: 80px;\n      border-radius: 20px;\n      border: 3px solid white;\n      font-size: 2rem;\n      color: white;\n      font-family: 'Orbitron', serif;\n      background: #e17055;\n      &:focus {\n        outline: none;\n      }\n      &:hover {\n        border: 3px solid #dfe6e9;\n        font-weight: 500;\n      }\n    }\n    button.function-button {\n      background-color: #2d3436;\n    }\n    button.white-button {\n      color: #2d3436;\n      background-color: white;\n    }\n  }\n  .zero-button {\n    grid-column: 1/3;\n  }\n`;\n\nexport const DisplayStyles = styled.div`\n  display: grid;\n  grid-template-rows: 90px 50px;\n  grid-template-columns: 1fr;\n  border: 4px solid white;\n  max-width: 700px;\n  margin: 10px auto;\n  align-items: center;\n  border-radius: 20px;\n  background: #e17055;\n  @media (max-width: 500px) {\n    width: 95%;\n    grid-template-rows: 60px 40px;\n  }\n  h2,\n  p {\n    text-align: center;\n    color: white;\n  }\n  h2 {\n    font-size: 2.5rem;\n    margin: 0;\n    text-align: right;\n    border-bottom: 4px solid white;\n    padding: 15px 20px;\n    @media (max-width: 500px) {\n      font-size: 1.5rem;\n      padding: 10px;\n    }\n  }\n  h2.long-main-display {\n    font-size: 1.2rem;\n  }\n  p {\n    margin: 5px 0;\n    font-size: 1.3rem;\n    @media (max-width: 500px) {\n      font-size: 0.8rem;\n    }\n  }\n  p.long-stored-display {\n    font-size: 0.5rem;\n  }\n`;\n","import React, { useContext } from 'react';\nimport { NumberContext } from './NumberProvider';\nimport { DisplayStyles } from './styles/Styles';\n\nconst Display = () => {\n  const { number, storedNumber, functionType } = useContext(NumberContext);\n  return (\n    <DisplayStyles>\n      <h2 className={storedNumber && storedNumber.length > 12 ? 'long-main-display' : undefined}>\n        {!number.length && !storedNumber ? '0' : number || storedNumber}\n      </h2>\n      <p className={storedNumber && storedNumber.length > 12 ? 'long-stored-display' : undefined}>\n        {!storedNumber ? 'ENTER SOME NUMBERS' : `${storedNumber} ${functionType} ${number}`}\n      </p>\n    </DisplayStyles>\n  );\n};\n\nexport default Display;\n","import React, { useContext } from 'react';\nimport { NumberContext } from './NumberProvider';\n\nconst EqualButton = () => {\n  const { doMath } = useContext(NumberContext);\n  return (\n    <button className=\"white-button\" type=\"button\" onClick={() => doMath()}>\n      =\n    </button>\n  );\n};\n\nexport default EqualButton;\n","import React, { useContext } from 'react';\nimport { NumberContext } from './NumberProvider';\n\nconst BackButton = () => {\n  const { handleBackButton } = useContext(NumberContext);\n  return (\n    <button type=\"button\" className=\"white-button\" onClick={() => handleBackButton()}>\n      &#8592;\n    </button>\n  );\n};\n\nexport default BackButton;\n","import React, { useContext } from 'react';\nimport { NumberContext } from './NumberProvider';\n\nconst NegativeButton = () => {\n  const { handleToggleNegative } = useContext(NumberContext);\n  return (\n    <button type=\"button\" className=\"white-button\" onClick={() => handleToggleNegative()}>\n      -/+\n    </button>\n  );\n};\n\nexport default NegativeButton;\n","import React, { useContext } from 'react';\r\nimport { NumberContext } from './NumberProvider';\r\n\r\nconst CosButton = ({ buttonValue }) => {\r\n  const { handleSetCosValue } = useContext(NumberContext);\r\n  return (\r\n    <button className=\"function-button\" type=\"button\" onClick={() => handleSetCosValue(buttonValue)}>\r\n      {buttonValue}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default CosButton;","import React, { useContext } from 'react';\r\nimport { NumberContext } from './NumberProvider';\r\n\r\nconst SinButton = ({ buttonValue }) => {\r\n  const { handleSetSinValue } = useContext(NumberContext);\r\n  return (\r\n    <button className=\"function-button\" type=\"button\" onClick={() => handleSetSinValue(buttonValue)}>\r\n      {buttonValue}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default SinButton;","import React, { useContext } from 'react';\r\nimport { NumberContext } from './NumberProvider';\r\n\r\nconst PiButton = ({ buttonValue }) => {\r\n  const { handleSetDisplayValue } = useContext(NumberContext);\r\n  return (\r\n    <button className=\"function-button\" type=\"button\" onClick={() =>handleSetDisplayValue(buttonValue)}>\r\n      π\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default PiButton;","import React, { useContext } from 'react';\r\nimport { NumberContext } from './NumberProvider';\r\n\r\nconst ExpoButton = ({ buttonValue }) => {\r\n  const { handleSetExpoValue } = useContext(NumberContext);\r\n  return (\r\n    <button className=\"function-button\" type=\"button\" onClick={() => handleSetExpoValue(buttonValue)}>\r\n      {buttonValue}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ExpoButton;","import React, { useContext } from 'react';\r\nimport { NumberContext } from './NumberProvider';\r\n\r\nconst TanButton = ({ buttonValue }) => {\r\n  const { handleSetTanValue } = useContext(NumberContext);\r\n  return (\r\n    <button className=\"function-button\" type=\"button\" onClick={() => handleSetTanValue(buttonValue)}>\r\n      {buttonValue}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default TanButton;","import React, { useContext } from 'react';\r\nimport { NumberContext } from './NumberProvider';\r\n\r\nconst CotButton = ({ buttonValue }) => {\r\n  const { handleSetCotValue } = useContext(NumberContext);\r\n  return (\r\n    <button className=\"function-button\" type=\"button\" onClick={() => handleSetCotValue(buttonValue)}>\r\n      {buttonValue}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default CotButton;","import React, { useContext } from 'react';\r\nimport { NumberContext } from './NumberProvider';\r\n\r\nconst RootButton = ({ buttonValue }) => {\r\n  const { handleSetRootValue } = useContext(NumberContext);\r\n  return (\r\n    <button className=\"function-button\" type=\"button\" onClick={() => handleSetRootValue(buttonValue)}>\r\n      {buttonValue}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default RootButton;","import React, { useContext } from 'react';\r\nimport { NumberContext } from './NumberProvider';\r\n\r\nconst LogButton = ({ buttonValue }) => {\r\n  const { handleSetLogValue } = useContext(NumberContext);\r\n  return (\r\n    <button className=\"function-button\" type=\"button\" onClick={() => handleSetLogValue(buttonValue)}>\r\n      {buttonValue}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default LogButton;","import React, { useContext } from 'react';\r\nimport { NumberContext } from './NumberProvider';\r\n\r\nconst SquareButton = ({ buttonValue }) => {\r\n  const { handleSetSquareValue } = useContext(NumberContext);\r\n  return (\r\n    <button className=\"function-button\" type=\"button\" onClick={() => handleSetSquareValue(buttonValue)}>\r\n      {buttonValue}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default SquareButton;","import React from 'react';\nimport NumberButton from './NumberButton';\nimport FunctionButton from './FunctionButton';\nimport ClearButton from './ClearButton';\nimport Display from './Display';\nimport EqualButton from './EqualButton';\nimport BackButton from './BackButton';\nimport NegativeButton from './NegativeButton';\nimport CosButton from './CosButton';\nimport SinButton from './SinButton';\nimport PiButton from './PiButton';\nimport ExpoButton from './ExponentButton';\nimport TanButton from './TanButton';\nimport CotButton from './CotButton';\nimport RootButton from './RootButton';\nimport LogButton from './LogButton';\nimport SquareButton from './SquareButton';\n\nimport { CalculatorStyles } from './styles/Styles';\n\nconst Calculator = () => (\n  <CalculatorStyles>\n    <div className=\"display\">\n      <h1>CALCULATER</h1>\n      <Display />\n    </div>\n    <div className=\"number-pad\">\n      <ClearButton />\n      <BackButton />\n      <NegativeButton />\n      <FunctionButton buttonValue=\"/\" />\n      <RootButton buttonValue=\"√\" />\n      <SinButton buttonValue=\"sin\" />\n      \n     \n      <NumberButton buttonValue={7} />\n      <NumberButton buttonValue={8} />\n      <NumberButton buttonValue={9} />\n     \n      <FunctionButton buttonValue=\"-\" />\n      <SquareButton buttonValue=\"x²\" />\n      <CosButton buttonValue=\"cos\" />\n\n      <NumberButton buttonValue={4} />\n      <NumberButton buttonValue={5} />\n      <NumberButton buttonValue={6} />\n\n      <FunctionButton buttonValue=\"*\" />\n      <PiButton buttonValue=\"3.141592\" />\n      <TanButton buttonValue=\"tan\" />\n\n      <NumberButton buttonValue={1} />\n      <NumberButton buttonValue={2} />\n      <NumberButton buttonValue={3} />\n      <FunctionButton buttonValue=\"+\" />\n      <ExpoButton buttonValue=\"x^\" />\n      <CotButton buttonValue=\"cot\" />\n     \n      <div className=\"zero-button\">\n        <NumberButton buttonValue={0} />\n      </div>\n      <NumberButton buttonValue=\".\" />\n      <FunctionButton buttonValue=\"%\" />\n      <LogButton buttonValue=\"ln\" />\n      <EqualButton />\n      \n    </div>\n  </CalculatorStyles>\n);\n\nexport default Calculator;\n","import React from 'react';\nimport Calculator from './components/Calculator';\nimport NumberProvider from './components/NumberProvider';\n\nconst App = () => (\n  <NumberProvider>\n    <Calculator />\n  </NumberProvider>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}